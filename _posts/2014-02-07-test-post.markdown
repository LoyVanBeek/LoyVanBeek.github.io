---
published: false
title: The Amigo task execution framework
layout: post
---

## Introduction
The Amigo domestic service robot uses, at the highest level, smach state machines to execute its tasks.
These state machines use the underlying ROS software to make the actual hardware do stuff.

The high-level task execution framework underwent a couple steps in its evolution during my time so far on the Amigo Robocup team. 

When I first arrived at the team and saw the robot rolling around for the very first time, I was awestruck. That was really really cool. Commanding it myself for the first time felt even more awesome: using RViz, just point-and-click where it should go and it just goes there! 
I programmed huge ABB industrial robots before, but this was a different kind of beast. 

Industrial robots, AFAIK, often use a proprietary programming language or DSL. Amigo, and most ROS software is either in C++ or Python. Most of Amigo's lower level software is C++ and the high-level stuff is in Python. Low-level is a bit of a strech here: in this context, i'm using the term for everyhing from sending command over EtherCAT to path planning and (3D) computer vision. 

### Smach
[Smach](http://wiki.ros.org/executive_smach) is a state machine framework. We use it extensively to defone the high-level behavior of the robot and have,over time, developed a library of states and actions the robot can perform. These can be stringed (well, tangled) together to create more complex behaviors. 

Why tangled? Because we want to deal with errors and faults, which can occur anywhere. Grasping an object may fail, navigating somewhere may fail due to several reasons as well. As with any software, we want to deal specific error and fix them in the most appropriate manner, with the robot maintaining its autonomy. 
More on this later. 

## World model

## Evolution
After digging in to the code for the first time, I saw what can only be described as Python being coded by a C programmer. Global variables and functions, but also circular references. Lots of room for improvement. 
The first step was to move the functions that worked with, e.g. the robot arms into part-specific classes, i.e. classes for Arms,the Base, Head, Spindle, Perception, Worldmodel etc. 


## Handling errors & customizing behavior
Handling an error (due to hardware, visual perception, crashing software) can sometimes be resolved by having a human perform a subtask on request of the robot or by having the robot try a different approach to the same subtask. Often, the correct resolution of a failure is task specific. Due to several layers of hierarchical state machines, parametrizing them in a much lower level is often difficult and verbose. 

Customizing behavior is often difficult, because of the same reason. It the moment, we have the "how" of a task coupled to the "which" of a task. For example: we want to specify at the task-level which object to interact with, like the closest person. The "closest" part of that specification is now part of the "how", hardcoded in the state machines. 
